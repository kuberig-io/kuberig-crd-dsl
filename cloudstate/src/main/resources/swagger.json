{
  "swagger": "2.0",
  "info": {
    "title": "Kubernetes (cloudstate.io)",
    "version": "v1.18.2"
  },
  "paths": {
    "/apis/cloudstate.io/v1alpha1/namespaces/{namespace}/statefulservices": {
      "get": {
        "description": "list objects of kind StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "listCloudstateIoV1alpha1NamespacedStatefulService",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "name": "allowWatchBookmarks",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "name": "continue",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "name": "limit",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulServiceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "createCloudstateIoV1alpha1NamespacedStatefulService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "deleteCloudstateIoV1alpha1CollectionNamespacedStatefulService",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "name": "allowWatchBookmarks",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "name": "continue",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "name": "limit",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/apis/cloudstate.io/v1alpha1/namespaces/{namespace}/statefulservices/{name}": {
      "get": {
        "description": "read the specified StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "readCloudstateIoV1alpha1NamespacedStatefulService",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "replaceCloudstateIoV1alpha1NamespacedStatefulService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "deleteCloudstateIoV1alpha1NamespacedStatefulService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "name": "gracePeriodSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "name": "orphanDependents",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "name": "propagationPolicy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified StatefulService",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "patchCloudstateIoV1alpha1NamespacedStatefulService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the StatefulService",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/apis/cloudstate.io/v1alpha1/namespaces/{namespace}/statefulservices/{name}/status": {
      "get": {
        "description": "read status of the specified StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "readCloudstateIoV1alpha1NamespacedStatefulServiceStatus",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "replaceCloudstateIoV1alpha1NamespacedStatefulServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified StatefulService",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "patchCloudstateIoV1alpha1NamespacedStatefulServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the StatefulService",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/apis/cloudstate.io/v1alpha1/namespaces/{namespace}/statefulstores": {
      "get": {
        "description": "list objects of kind StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "listCloudstateIoV1alpha1NamespacedStatefulStore",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "name": "allowWatchBookmarks",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "name": "continue",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "name": "limit",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStoreList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "post": {
        "description": "create a StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "createCloudstateIoV1alpha1NamespacedStatefulStore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete collection of StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "deleteCloudstateIoV1alpha1CollectionNamespacedStatefulStore",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "name": "allowWatchBookmarks",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "name": "continue",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "name": "limit",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/apis/cloudstate.io/v1alpha1/namespaces/{namespace}/statefulstores/{name}": {
      "get": {
        "description": "read the specified StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "readCloudstateIoV1alpha1NamespacedStatefulStore",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "replaceCloudstateIoV1alpha1NamespacedStatefulStore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "description": "delete a StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "deleteCloudstateIoV1alpha1NamespacedStatefulStore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "name": "gracePeriodSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "name": "orphanDependents",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "name": "propagationPolicy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified StatefulStore",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "patchCloudstateIoV1alpha1NamespacedStatefulStore",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the StatefulStore",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/apis/cloudstate.io/v1alpha1/namespaces/{namespace}/statefulstores/{name}/status": {
      "get": {
        "description": "read status of the specified StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "readCloudstateIoV1alpha1NamespacedStatefulStoreStatus",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace status of the specified StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "replaceCloudstateIoV1alpha1NamespacedStatefulStoreStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update status of the specified StatefulStore",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "patchCloudstateIoV1alpha1NamespacedStatefulStoreStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the StatefulStore",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/apis/cloudstate.io/v1alpha1/statefulservices": {
      "get": {
        "description": "list objects of kind StatefulService",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "listCloudstateIoV1alpha1StatefulServiceForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulService"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "boolean",
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "name": "allowWatchBookmarks",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "name": "continue",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "name": "fieldSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "name": "labelSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "integer",
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "name": "limit",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "name": "resourceVersion",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "integer",
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "name": "timeoutSeconds",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "boolean",
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "name": "watch",
          "in": "query"
        }
      ]
    },
    "/apis/cloudstate.io/v1alpha1/statefulstores": {
      "get": {
        "description": "list objects of kind StatefulStore",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "cloudstateIo_v1alpha1"
        ],
        "operationId": "listCloudstateIoV1alpha1StatefulStoreForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.cloudstate.StatefulStore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "boolean",
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "name": "allowWatchBookmarks",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "name": "continue",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "name": "fieldSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "name": "labelSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "integer",
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "name": "limit",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "name": "resourceVersion",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "integer",
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "name": "timeoutSeconds",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "boolean",
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "name": "watch",
          "in": "query"
        }
      ]
    }
  },
  "definitions": {
    "io.cloudstate.CassandraCredentials": {
      "description": "CassandraCredentials is the credentials for a Cassandra instance.",
      "type": "object",
      "properties": {
        "keyspaceKey": {
          "description": "KeyspaceKey is the key of the keyspace in the secret. Defaults to keyspace.",
          "type": "string"
        },
        "passwordKey": {
          "description": "PasswordKey is the key of the password in the secret. Defaults to password.",
          "type": "string"
        },
        "secret": {
          "description": "Secret is the name of a secret in the local namespace to load the credentials from.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "usernameKey": {
          "description": "UsernameKey is the key of the username in the secret. Defaults to username.",
          "type": "string"
        }
      }
    },
    "io.cloudstate.CassandraStore": {
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Credentials is a reference to a secret in the same namespace to use for the username and password of the Cassandra database.",
          "$ref": "#/definitions/io.cloudstate.CassandraCredentials"
        },
        "host": {
          "description": "Host to connect to.",
          "type": "string"
        },
        "port": {
          "description": "Port to connect to. Defaults to 9042.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.cloudstate.CloudstateCondition": {
      "description": "CloudstateCondition defines the possible conditions of stateful services.",
      "type": "object",
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": "string"
        }
      }
    },
    "io.cloudstate.GoogleCloudSQLPostgresStorage": {
      "type": "object",
      "properties": {
        "automaticIncrease": {
          "description": "Whether the storage capacity may be automatically increased as needed. Defaults to true. Modifiable after creation.",
          "type": "boolean"
        },
        "automaticIncreaseLimit": {
          "description": "A limit to how high the capacity may be automatically increased. A value of 0 means no limit. The default is 0. Modifiable after creation.",
          "type": "string",
          "format": "int-or-string"
        },
        "capacity": {
          "description": "The capacity for the storage. Can be any value up to 30,720 GB. Defaults to 1GB. After creation, can only be increased.",
          "type": "string",
          "format": "int-or-string"
        },
        "type": {
          "description": "The type of disks for the storage to use, either SSD or HDD. Cannot be changed after creation. Defaults to SSD.",
          "type": "string"
        }
      }
    },
    "io.cloudstate.GoogleCloudSQLPostgresStore": {
      "description": "GoogleCloudSQLPostgresStore creates a managed Postgres instance for the StatefulService.",
      "type": "object",
      "properties": {
        "cores": {
          "description": "The number of cores the Postgres instance should use. Must be 1, or an even number between 2 and 64. Defaults to 1. Modifiable after creation but will take store offline for several minutes.",
          "type": "integer",
          "format": "int32"
        },
        "highAvailability": {
          "description": "Whether high availability is enabled. High availability instances run a second slave postgres instance that can be failed over to should the first fail. High availability instances roughly double costs. Defaults to false. Modifiable after creation but will take store offline for several minutes.",
          "type": "boolean"
        },
        "memory": {
          "description": "The amount of memory the Postgres instance should have. Must be between 0.9 GiB and 6.5 GiB per vCPU, and must be\t// a multiple of 256 MiB, and at least 3.75 GiB. Defaults to 3.75 GiB. Modifiable after creation but will take store offline for several minutes.",
          "type": "string",
          "format": "int-or-string"
        },
        "name": {
          "description": "The name of the Cloud SQL instance. If not specified, the name of the stateful store resource will be used.",
          "type": "string"
        },
        "storage": {
          "description": "The storage configuration.",
          "$ref": "#/definitions/io.cloudstate.GoogleCloudSQLPostgresStorage"
        }
      }
    },
    "io.cloudstate.GoogleCloudSQLPostgresStoreStatus": {
      "description": "GoogleCloudSQLPostgresStoreStatus defines the status of a Google Cloud SQL postgres store.",
      "type": "object",
      "properties": {
        "instanceName": {
          "description": "InstanceName is the name of the instance.",
          "type": "string"
        }
      }
    },
    "io.cloudstate.PostgresCredentials": {
      "description": "PostgresCredentials is the credentials for a Postgres instance.",
      "type": "object",
      "properties": {
        "databaseKey": {
          "description": "DatabaseKey is the key of the database in the secret. Defaults to database.",
          "type": "string"
        },
        "passwordKey": {
          "description": "PasswordKey is the key of the password in the secret. Defaults to password.",
          "type": "string"
        },
        "secret": {
          "description": "Secret is the name of a secret in the local namespace to load the credentials from.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "usernameKey": {
          "description": "UsernameKey is the key of the username in the secret. Defaults to username.",
          "type": "string"
        }
      }
    },
    "io.cloudstate.PostgresStore": {
      "description": "PostgresStore represents a Postgres instance.",
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Credentials for the Postgres instance.",
          "$ref": "#/definitions/io.cloudstate.PostgresCredentials"
        },
        "googleCloudSql": {
          "description": "GoogleCloudSQL may used to automatically provision a Google CloudSQL instance. Do not specify a host, port or credentials if this is used.",
          "$ref": "#/definitions/io.cloudstate.GoogleCloudSQLPostgresStore"
        },
        "host": {
          "description": "Host to connect to.",
          "type": "string"
        },
        "port": {
          "description": "Port to connect to. Defaults to 5432.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.cloudstate.PostgresStoreStatus": {
      "description": "PostgresStoreStatus defines the state of a postgres store.",
      "type": "object",
      "properties": {
        "googleCloudSql": {
          "description": "GoogleCloudSQL is the status of the managed Google Cloud SQL Postgres instance.",
          "$ref": "#/definitions/io.cloudstate.GoogleCloudSQLPostgresStoreStatus"
        }
      }
    },
    "io.cloudstate.SpannerStore": {
      "description": "SpannerStore simply indicates the use of a Cloudstate-managed Spanner store.",
      "type": "object",
      "properties": {
        "database": {
          "description": "Database is the Spanner database id. Defaults to cloudstate, and can be overridden on a per deployment basis.",
          "type": "string"
        },
        "instance": {
          "description": "Instance is the Spanner instance id.",
          "type": "string"
        },
        "secret": {
          "description": "Secret the secret to read Spanner credentials from. Must have a key.json file in it.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "string": {
          "description": "Project is the GCP project to use.",
          "type": "string"
        }
      }
    },
    "io.cloudstate.StatefulService": {
      "description": "StatefulService is the Schema for the statefulservices API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.cloudstate.StatefulServiceSpec"
        },
        "status": {
          "$ref": "#/definitions/io.cloudstate.StatefulServiceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cloudstate.io",
          "kind": "StatefulService",
          "version": "v1alpha1"
        }
      ]
    },
    "io.cloudstate.StatefulServiceSpec": {
      "description": "StatefulServiceSpec defines the desired state of StatefulService.",
      "type": "object",
      "properties": {
        "containers": {
          "description": "The containers to run in the StatefulService. At least one container is required.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "replicas": {
          "description": "The number of replicas to deploy for the StatefulService. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "storeConfig": {
          "description": "The data store that Cloudstate will use for persisting state. Defaults to using an in-memory store.",
          "$ref": "#/definitions/io.cloudstate.StatefulServiceStoreConfig"
        }
      }
    },
    "io.cloudstate.StatefulServiceStatus": {
      "description": "StatefulServiceStatus defines the observed state of StatefulService.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions of the StatefulService.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.cloudstate.CloudstateCondition"
          }
        },
        "replicas": {
          "description": "Replicas that are available for the StatefulService.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector that is used to match pods associated with this StatefulService. This is needed for the scale sub resource to allow the Kubernetes HPA to work.",
          "type": "string"
        },
        "summary": {
          "description": "Summary of the current status.",
          "type": "string"
        }
      }
    },
    "io.cloudstate.StatefulServiceStoreConfig": {
      "description": "StatefulServiceStoreConfig defines the StatefulStore to use and any configuration options.",
      "type": "object",
      "properties": {
        "database": {
          "description": "The name of the database to use in the StatefulStore if it supports it. This is used to namespace the StatefulService's data, so multiple services can share the same StatefulStore. Defaults to \"cloudstate\".",
          "type": "string"
        },
        "secret": {
          "description": "The secret to use for the StatefulStore if it supports it.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "statefulStore": {
          "description": "A reference to the StatefulStore to use.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      }
    },
    "io.cloudstate.StatefulStore": {
      "description": "StatefulStore is the Schema for the statefulstores API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.cloudstate.StatefulStoreSpec"
        },
        "status": {
          "$ref": "#/definitions/io.cloudstate.StatefulStoreStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cloudstate.io",
          "kind": "StatefulStore",
          "version": "v1alpha1"
        }
      ]
    },
    "io.cloudstate.StatefulStoreSpec": {
      "description": "StatefulStoreSpec defines the desired state of StatefulStore.",
      "type": "object",
      "properties": {
        "cassandra": {
          "description": "Cassandra",
          "$ref": "#/definitions/io.cloudstate.CassandraStore"
        },
        "inMemory": {
          "description": "InMemory store will keep everything in memory. This is the simplest option to get started, but must not be used in production.",
          "type": "boolean"
        },
        "postgres": {
          "description": "Postgres will store state in Postgres.",
          "$ref": "#/definitions/io.cloudstate.PostgresStore"
        },
        "spanner": {
          "description": "SpannerStore uses a Spanner store managed by the Cloudstate infrastructure.",
          "$ref": "#/definitions/io.cloudstate.SpannerStore"
        }
      }
    },
    "io.cloudstate.StatefulStoreStatus": {
      "description": "StatefulStoreStatus defines the observed state of StatefulStore.",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.cloudstate.CloudstateCondition"
          }
        },
        "postgres": {
          "description": "Postgres if this is a postgres store, the status of that store.",
          "$ref": "#/definitions/io.cloudstate.PostgresStoreStatus"
        },
        "summary": {
          "description": "Summary of the current status.",
          "type": "string"
        }
      }
    }
  }
}